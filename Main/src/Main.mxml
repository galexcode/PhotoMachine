<?xml version="1.0"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
                       creationComplete="creationComplete()">
    <fx:Script><![CDATA[
        import at.imagination.flare.Stats;

        import com.transmote.flar.FLARManager;
        import com.transmote.flar.marker.FLARMarkerEvent;

        import mx.core.UIComponent;

        import org.jetbrains.FaceAndMarkerDetector;

        private static const DEBUG:Boolean = true;

        private var _flarManager:FLARManager;
        private var _canvas:UIComponent;
        private var _listeners:Vector.<MarkerListener> = new Vector.<MarkerListener>();

        private function creationComplete():void {
            _flarManager = new FLARManager("flarConfig.xml", new FaceAndMarkerDetector(), stage);
            _flarManager.addEventListener(ErrorEvent.ERROR, onFlarManagerError);
            _flarManager.addEventListener(FLARMarkerEvent.MARKER_ADDED, onMarkerAdded);
            _flarManager.addEventListener(FLARMarkerEvent.MARKER_UPDATED, onMarkerUpdated);
            _flarManager.addEventListener(FLARMarkerEvent.MARKER_REMOVED, onMarkerRemoved);

            _canvas = new UIComponent();
            addElement(_canvas);
            _canvas.scaleX = 2.2;
            _canvas.scaleY = 2.2;
            var flarSource:Sprite = Sprite(_flarManager.flarSource);
            _canvas.addChild(flarSource);

            _listeners.push(new PhotoMaker(_flarManager, _canvas));
            _listeners.push(new FaceHighlighter(_canvas));
            if (DEBUG) {
                _listeners.push(new DebugMarkerListener(_canvas));
                _canvas.addChild(new Stats(250));
            }
        }

        private function onFlarManagerError(evt:ErrorEvent):void {
            _flarManager.removeEventListener(ErrorEvent.ERROR, this.onFlarManagerError);
            _flarManager.removeEventListener(FLARMarkerEvent.MARKER_ADDED, this.onMarkerAdded);
            _flarManager.removeEventListener(FLARMarkerEvent.MARKER_UPDATED, this.onMarkerUpdated);
            _flarManager.removeEventListener(FLARMarkerEvent.MARKER_REMOVED, this.onMarkerRemoved);
            trace(evt.text);
        }

        public function onMarkerAdded(evt:FLARMarkerEvent):void {
            for each (var markerListener:MarkerListener in _listeners) {
                markerListener.onMarkerAdded(evt);
            }
        }

        public function onMarkerUpdated(evt:FLARMarkerEvent):void {
            for each (var markerListener:MarkerListener in _listeners) {
                markerListener.onMarkerUpdated(evt);
            }
        }

        public function onMarkerRemoved(evt:FLARMarkerEvent):void {
            for each (var markerListener:MarkerListener in _listeners) {
                markerListener.onMarkerRemoved(evt);
            }
        }
        ]]></fx:Script>
</s:WindowedApplication>
